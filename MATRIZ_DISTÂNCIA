#include <cstdio>
#include <ctime>
#include <cstdlib>


void iniciamatriz(int **matriz,int n){


    srand(time(NULL));
    for(int i=0; i<n; i++)
    {
        printf("\n");
        for(int j=0; j<n; j++)
        {
            matriz[i][j]=rand()%10;
            if(matriz[i][j]%5==0)
            {
                matriz[i][j]=1;
            }
            else if(matriz[i][j]!=0)
            {
                matriz[i][j]=0;
            }
        }
    }
};

void iniciamatriz_D(int **matriz,int n)
{




    for(int i=0; i<n; i++)
    {
        printf("\n");
        for(int j=0; j<n; j++)
        {
            matriz[i][j]=-1;
        }
    }
};
class Posicao
{
public :
    int l ;
    int c ;
};

class FilaPosicao
{
public :
    Posicao * v ;
    int tam_max ;
    int ini ;
    int fim ;
    int cont ;
    // m é todo construtor , inicializa a fila
    FilaPosicao ( int tamanho )
    {
        v = new Posicao [ tamanho ]; // cria vetor de posicoes com o tamanho desejadtam_max = tamanho ;
        ini = 0;
        fim = -1;
        cont = 0;
    }

    void enfileirar ( Posicao x )
    {
        if (cont<tam_max)
        {
            v[fim+1].l=x.l;
            v[fim+1].c=x.c;
            fim=(fim%tam_max)+1;
            cont++;
        }
    }

    Posicao  desenfileirar ()
    {
        Posicao aux;
        if (cont>0)
        {
            aux.l=v[ini].l;
            aux.c=v[ini].c;
            v[ini].l=0;
            v[ini].c=0;
            ini=(ini%tam_max)+1;
            cont--;
            return aux;
        }
    }

    int vazia()
    {
        if(cont==0)
        {
            return 0;
        }
        return 1;
    }
};

int main ()
{
    FilaPosicao f(64); // cria fila de tamanho 10
    Posicao p;
    int **mat, **matd, *v, *v2, n;

    scanf("%d",&n);


    //alocando memória para a matriz distância
    v2=(int*)malloc(n*sizeof(int));
    if(v2==nullptr)
    {
        printf("não foi possível alocar a memória para o ponteiro para vetor de inteiros\n");
        //return 1;
    }
    else
    {
        printf("alocação de memória bem sucedida\n");
    }
    matd=(int**)malloc(n*sizeof(v2));
    if(mat==nullptr)
    {
        printf("não foi possível alocar a memória para o ponteiro para ponteiro de vetor de inteiros\n");
        //return 1;
    }
    else
    {
        printf("alocação de memória bem sucedida\n");
    }
    for(int i=0; i<n; i++)
    {
        matd[i]=&v2[i];
    }
    //inicializando a matriz distância
    iniciamatriz_D(matd,n);
    printf("\n");


    //alocando memória para a matriz
    v=(int*)malloc(n*sizeof(int));
    if(v==nullptr)
    {
        printf("não foi possível alocar a memória para o ponteiro para vetor de inteiros\n");
        //return 1;
    }
    else
    {
        printf("alocação de memória bem sucedida\n");
    }
    mat=(int**)malloc(n*sizeof(v));
    if(mat==nullptr)
    {
        printf("não foi possível alocar a memória para o ponteiro para ponteiro de vetor de inteiros\n");
        //return 1;
    }
    else
    {
        printf("alocação de memória bem sucedida\n");
    }
    for(int i=0; i<n; i++)
    {
        mat[i]=&v[i];
    }

    //inicializando a matriz
    iniciamatriz(mat,n);

//.......................................................


    //printando a matriz
    for(int i=0; i<n; i++)
    {
        printf("\n");
        for(int j=0; j<n; j++)
        {
            printf("%d ",mat[i][j]);
        }
    }

    printf("\n");

    //percorrendo a matriz e anotando as posições em que existe o número 1 na lista
    //preenchendo a matriz distância com a distância zero nas posições em que existe o número 1 na matriz original
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++)
        {
            if(mat[i][j]==1)
            {
                p.l=i;
                p.c=j;
                matd[i][j]=0;

            }

        }
    }


    //printando a matriz distância
    for(int i=0; i<n; i++)
    {
        printf("\n");
        for(int j=0; j<n; j++)
        {
            printf("%d ",matd[i][j]);
        }
    }






    return 0;
}
